from django.contrib import admin
from django.utils.html import format_html
from django import forms
from django.urls import reverse
from django.utils.safestring import mark_safe
from django.db.models import Count
from .models import Vendor, Branch


class OpeningHoursWidget(forms.Textarea):
    """Custom widget for opening hours with helpful placeholder"""
    
    def __init__(self, attrs=None):
        default_attrs = {
            'rows': 10,
            'cols': 50,
            'placeholder': '''–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:

{
  "monday": "09:00 - 18:00",
  "tuesday": "09:00 - 18:00", 
  "wednesday": "09:00 - 18:00",
  "thursday": "09:00 - 18:00",
  "friday": "09:00 - 18:00",
  "saturday": "10:00 - 16:00",
  "sunday": "Closed"
}

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
‚Ä¢ "09:00 - 18:00" –∏–ª–∏ "09:00-18:00"
‚Ä¢ "Closed" –∏–ª–∏ "–∑–∞–∫—Ä—ã—Ç–æ" –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö
‚Ä¢ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π'''
        }
        if attrs:
            default_attrs.update(attrs)
        super().__init__(default_attrs)

class BranchAdminForm(forms.ModelForm):
    """Custom form for Branch admin with enhanced opening_hours field"""
    
    class Meta:
        model = Branch
        fields = '__all__'
        widgets = {
            'opening_hours': OpeningHoursWidget(),
        }
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['opening_hours'].help_text = '''
        <strong>–§–æ—Ä–º–∞—Ç JSON –¥–ª—è —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã:</strong><br>
        <code>{"monday": "09:00 - 18:00", "tuesday": "09:00 - 18:00", ...}</code><br><br>
        <strong>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏:</strong><br>
        ‚Ä¢ <code>"09:00 - 18:00"</code> - —Å –ø—Ä–æ–±–µ–ª–∞–º–∏<br>
        ‚Ä¢ <code>"09:00-18:00"</code> - –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤<br>
        ‚Ä¢ <code>"Closed"</code> - –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π<br><br>
        <strong>–ù–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π:</strong> monday, tuesday, wednesday, thursday, friday, saturday, sunday
        '''


class BranchInline(admin.TabularInline):
    model = Branch
    extra = 1
    fields = ('name', 'address', 'phone', 'is_active')
    show_change_link = True


@admin.register(Vendor)
class VendorAdmin(admin.ModelAdmin):
    list_display = ('logo_display', 'name', 'type', 'owner', 'rating', 'is_active', 'branches_count', 'items_count', 'created_at')
    list_filter = ('type', 'is_active', 'rating', 'created_at')
    search_fields = ('name', 'owner__username', 'owner__email', 'description', 'phone', 'email')
    ordering = ('-created_at',)
    inlines = [BranchInline]
    list_per_page = 25
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('owner', 'name', 'type', 'description', 'logo')
        }),
        ('–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('phone', 'email'),
            'classes': ('collapse',)
        }),
        ('–°—Ç–∞—Ç—É—Å –∏ —Ä–µ–π—Ç–∏–Ω–≥', {
            'fields': ('rating', 'is_active')
        }),
        ('–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    
    readonly_fields = ('created_at', 'updated_at')
    
    def logo_display(self, obj):
        if obj.logo:
            return format_html(
                '<img src="{}" width="50" height="50" style="border-radius: 50%; object-fit: cover;" />',
                obj.logo.url
            )
        return format_html(
            '<div style="width: 50px; height: 50px; background: #f8f9fa; border-radius: 50%; display: flex; align-items: center; justify-content: center; color: #6c757d;">üì¶</div>'
        )
    logo_display.short_description = "–õ–æ–≥–æ—Ç–∏–ø"
    
    def branches_count(self, obj):
        count = obj.branches.count()
        if count > 0:
            return format_html(
                '<a href="/admin/vendors/branch/?vendor__id__exact={}" style="color: #0d6efd; text-decoration: none;">{} —Ñ–∏–ª–∏–∞–ª–æ–≤</a>',
                obj.id, count
            )
        return "0 —Ñ–∏–ª–∏–∞–ª–æ–≤"
    branches_count.short_description = "–§–∏–ª–∏–∞–ª—ã"
    
    def items_count(self, obj):
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∏–ª–∏–∞–ª—ã
        count = 0
        for branch in obj.branches.all():
            count += branch.items.count()
        if count > 0:
            return format_html(
                '<a href="/admin/catalog/item/?branch__vendor__id__exact={}" style="color: #198754; text-decoration: none;">{} —Ç–æ–≤–∞—Ä–æ–≤</a>',
                obj.id, count
            )
        return "0 —Ç–æ–≤–∞—Ä–æ–≤"
    items_count.short_description = "–¢–æ–≤–∞—Ä—ã"
    
    actions = ['activate_vendors', 'deactivate_vendors', 'view_vendor_dashboard']
    
    def activate_vendors(self, request, queryset):
        updated = queryset.update(is_active=True)
        self.message_user(request, f'{updated} –≤–µ–Ω–¥–æ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.')
    activate_vendors.short_description = "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–µ–Ω–¥–æ—Ä–æ–≤"
    
    def deactivate_vendors(self, request, queryset):
        updated = queryset.update(is_active=False)
        self.message_user(request, f'{updated} –≤–µ–Ω–¥–æ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.')
    deactivate_vendors.short_description = "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–µ–Ω–¥–æ—Ä–æ–≤"
    
    def view_vendor_dashboard(self, request, queryset):
        if queryset.count() == 1:
            vendor = queryset.first()
            return format_html(
                '<a href="/vendors/admin/vendors/{}/" target="_blank" style="color: #0d6efd;">–û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –≤–µ–Ω–¥–æ—Ä–∞</a>',
                vendor.id
            )
        else:
            self.message_user(request, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ –≤–µ–Ω–¥–æ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–∞–Ω–µ–ª–∏.')
    view_vendor_dashboard.short_description = "–û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –≤–µ–Ω–¥–æ—Ä–∞"


@admin.register(Branch)
class BranchAdmin(admin.ModelAdmin):
    form = BranchAdminForm
    list_display = ('name', 'vendor', 'address', 'phone', 'opening_status', 'is_active', 'items_count', 'created_at')
    list_filter = ('vendor__type', 'is_active', 'created_at')
    search_fields = ('name', 'vendor__name', 'address', 'phone')
    ordering = ('-created_at',)
    list_per_page = 25
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('vendor', 'name', 'address', 'phone')
        }),
        ('–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ', {
            'fields': ('latitude', 'longitude'),
            'description': '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤'
        }),
        ('–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã', {
            'fields': ('opening_hours',),
            'description': '–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã —Ñ–∏–ª–∏–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON'
        }),
        ('–°—Ç–∞—Ç—É—Å', {
            'fields': ('is_active',)
        }),
        ('–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏', {
            'fields': ('created_at',),
            'classes': ('collapse',)
        }),
    )
    
    readonly_fields = ('created_at',)
    
    def opening_status(self, obj):
        """Display current opening status"""
        try:
            if obj.is_open_now():
                return format_html(
                    '<span style="color: green; font-weight: bold;">üü¢ –û—Ç–∫—Ä—ã—Ç–æ –¥–æ {}</span>',
                    obj.get_closing_time()
                )
            else:
                return format_html(
                    '<span style="color: red; font-weight: bold;">üî¥ {}</span>',
                    obj.get_closing_time()
                )
        except:
            return format_html('<span style="color: orange;">‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ</span>')
    opening_status.short_description = "–°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã"
    
    def items_count(self, obj):
        count = obj.items.count()
        if count > 0:
            return format_html(
                '<a href="/admin/catalog/item/?branch__id__exact={}" style="color: #198754; text-decoration: none;">{} —Ç–æ–≤–∞—Ä–æ–≤</a>',
                obj.id, count
            )
        return "0 —Ç–æ–≤–∞—Ä–æ–≤"
    items_count.short_description = "–¢–æ–≤–∞—Ä—ã"
    
    actions = ['activate_branches', 'deactivate_branches']
    
    def activate_branches(self, request, queryset):
        updated = queryset.update(is_active=True)
        self.message_user(request, f'{updated} —Ñ–∏–ª–∏–∞–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.')
    activate_branches.short_description = "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª–∏–∞–ª—ã"
    
    def deactivate_branches(self, request, queryset):
        updated = queryset.update(is_active=False)
        self.message_user(request, f'{updated} —Ñ–∏–ª–∏–∞–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.')
    deactivate_branches.short_description = "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª–∏–∞–ª—ã"
